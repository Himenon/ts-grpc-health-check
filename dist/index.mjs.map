{"version":3,"sources":["../src/v1/health_pb.js","../src/v1/health_grpc_pb.js","../src/index.ts"],"sourcesContent":["// source: health.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require(\"google-protobuf\");\nvar goog = jspb;\nvar global = function () {\n  if (this) {\n    return this;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n  return Function(\"return this\")();\n}.call(null);\n\ngoog.exportSymbol(\"proto.grpc.health.v1.HealthCheckRequest\", null, global);\ngoog.exportSymbol(\"proto.grpc.health.v1.HealthCheckResponse\", null, global);\ngoog.exportSymbol(\"proto.grpc.health.v1.HealthCheckResponse.ServingStatus\", null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.grpc.health.v1.HealthCheckRequest = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.grpc.health.v1.HealthCheckRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.grpc.health.v1.HealthCheckRequest.displayName = \"proto.grpc.health.v1.HealthCheckRequest\";\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.grpc.health.v1.HealthCheckResponse = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.grpc.health.v1.HealthCheckResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.grpc.health.v1.HealthCheckResponse.displayName = \"proto.grpc.health.v1.HealthCheckResponse\";\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.grpc.health.v1.HealthCheckRequest.prototype.toObject = function (opt_includeInstance) {\n    return proto.grpc.health.v1.HealthCheckRequest.toObject(opt_includeInstance, this);\n  };\n\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.grpc.health.v1.HealthCheckRequest} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n  proto.grpc.health.v1.HealthCheckRequest.toObject = (includeInstance, msg) => {\n    var f,\n      obj = {\n        service: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n    return obj;\n  };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.grpc.health.v1.HealthCheckRequest}\n */\nproto.grpc.health.v1.HealthCheckRequest.deserializeBinary = (bytes) => {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.grpc.health.v1.HealthCheckRequest();\n  return proto.grpc.health.v1.HealthCheckRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.grpc.health.v1.HealthCheckRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.grpc.health.v1.HealthCheckRequest}\n */\nproto.grpc.health.v1.HealthCheckRequest.deserializeBinaryFromReader = (msg, reader) => {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n      case 1:\n        var value = /** @type {string} */ (reader.readString());\n        msg.setService(value);\n        break;\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n  return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.grpc.health.v1.HealthCheckRequest.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.grpc.health.v1.HealthCheckRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.grpc.health.v1.HealthCheckRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.grpc.health.v1.HealthCheckRequest.serializeBinaryToWriter = (message, writer) => {\n  var f = undefined;\n  f = message.getService();\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n\n/**\n * optional string service = 1;\n * @return {string}\n */\nproto.grpc.health.v1.HealthCheckRequest.prototype.getService = function () {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n/**\n * @param {string} value\n * @return {!proto.grpc.health.v1.HealthCheckRequest} returns this\n */\nproto.grpc.health.v1.HealthCheckRequest.prototype.setService = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.grpc.health.v1.HealthCheckResponse.prototype.toObject = function (opt_includeInstance) {\n    return proto.grpc.health.v1.HealthCheckResponse.toObject(opt_includeInstance, this);\n  };\n\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.grpc.health.v1.HealthCheckResponse} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n  proto.grpc.health.v1.HealthCheckResponse.toObject = (includeInstance, msg) => {\n    var f,\n      obj = {\n        status: jspb.Message.getFieldWithDefault(msg, 1, 0),\n      };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n    return obj;\n  };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.grpc.health.v1.HealthCheckResponse}\n */\nproto.grpc.health.v1.HealthCheckResponse.deserializeBinary = (bytes) => {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.grpc.health.v1.HealthCheckResponse();\n  return proto.grpc.health.v1.HealthCheckResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.grpc.health.v1.HealthCheckResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.grpc.health.v1.HealthCheckResponse}\n */\nproto.grpc.health.v1.HealthCheckResponse.deserializeBinaryFromReader = (msg, reader) => {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n      case 1:\n        var value = /** @type {!proto.grpc.health.v1.HealthCheckResponse.ServingStatus} */ (reader.readEnum());\n        msg.setStatus(value);\n        break;\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n  return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.grpc.health.v1.HealthCheckResponse.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.grpc.health.v1.HealthCheckResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.grpc.health.v1.HealthCheckResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.grpc.health.v1.HealthCheckResponse.serializeBinaryToWriter = (message, writer) => {\n  var f = undefined;\n  f = message.getStatus();\n  if (f !== 0.0) {\n    writer.writeEnum(1, f);\n  }\n};\n\n/**\n * @enum {number}\n */\nproto.grpc.health.v1.HealthCheckResponse.ServingStatus = {\n  UNKNOWN: 0,\n  SERVING: 1,\n  NOT_SERVING: 2,\n  SERVICE_UNKNOWN: 3,\n};\n\n/**\n * optional ServingStatus status = 1;\n * @return {!proto.grpc.health.v1.HealthCheckResponse.ServingStatus}\n */\nproto.grpc.health.v1.HealthCheckResponse.prototype.getStatus = function () {\n  return /** @type {!proto.grpc.health.v1.HealthCheckResponse.ServingStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n/**\n * @param {!proto.grpc.health.v1.HealthCheckResponse.ServingStatus} value\n * @return {!proto.grpc.health.v1.HealthCheckResponse} returns this\n */\nproto.grpc.health.v1.HealthCheckResponse.prototype.setStatus = function (value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\ngoog.object.extend(exports, proto.grpc.health.v1);\n","// GENERATED CODE -- DO NOT EDIT!\n\n// Original file comments:\n// Copyright 2015 The gRPC Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// The canonical version of this proto can be found at\n// https://github.com/grpc/grpc-proto/blob/master/grpc/health/v1/health.proto\n//\nvar grpc = require(\"@grpc/grpc-js\");\nvar health_pb = require(\"./health_pb.js\");\n\nfunction serialize_grpc_health_v1_HealthCheckRequest(arg) {\n  if (!(arg instanceof health_pb.HealthCheckRequest)) {\n    throw new Error(\"Expected argument of type grpc.health.v1.HealthCheckRequest\");\n  }\n  return Buffer.from(arg.serializeBinary());\n}\n\nfunction deserialize_grpc_health_v1_HealthCheckRequest(buffer_arg) {\n  return health_pb.HealthCheckRequest.deserializeBinary(new Uint8Array(buffer_arg));\n}\n\nfunction serialize_grpc_health_v1_HealthCheckResponse(arg) {\n  if (!(arg instanceof health_pb.HealthCheckResponse)) {\n    throw new Error(\"Expected argument of type grpc.health.v1.HealthCheckResponse\");\n  }\n  return Buffer.from(arg.serializeBinary());\n}\n\nfunction deserialize_grpc_health_v1_HealthCheckResponse(buffer_arg) {\n  return health_pb.HealthCheckResponse.deserializeBinary(new Uint8Array(buffer_arg));\n}\n\nvar HealthService = (exports.HealthService = {\n  // If the requested service is unknown, the call will fail with status\n  // NOT_FOUND.\n  check: {\n    path: \"/grpc.health.v1.Health/Check\",\n    requestStream: false,\n    responseStream: false,\n    requestType: health_pb.HealthCheckRequest,\n    responseType: health_pb.HealthCheckResponse,\n    requestSerialize: serialize_grpc_health_v1_HealthCheckRequest,\n    requestDeserialize: deserialize_grpc_health_v1_HealthCheckRequest,\n    responseSerialize: serialize_grpc_health_v1_HealthCheckResponse,\n    responseDeserialize: deserialize_grpc_health_v1_HealthCheckResponse,\n  },\n  // Performs a watch for the serving status of the requested service.\n  // The server will immediately send back a message indicating the current\n  // serving status.  It will then subsequently send a new message whenever\n  // the service's serving status changes.\n  //\n  // If the requested service is unknown when the call is received, the\n  // server will send a message setting the serving status to\n  // SERVICE_UNKNOWN but will *not* terminate the call.  If at some\n  // future point, the serving status of the service becomes known, the\n  // server will send a new message with the service's serving status.\n  //\n  // If the call terminates with status UNIMPLEMENTED, then clients\n  // should assume this method is not supported and should not retry the\n  // call.  If the call terminates with any other status (including OK),\n  // clients should retry the call with appropriate exponential backoff.\n  watch: {\n    path: \"/grpc.health.v1.Health/Watch\",\n    requestStream: false,\n    responseStream: true,\n    requestType: health_pb.HealthCheckRequest,\n    responseType: health_pb.HealthCheckResponse,\n    requestSerialize: serialize_grpc_health_v1_HealthCheckRequest,\n    requestDeserialize: deserialize_grpc_health_v1_HealthCheckRequest,\n    responseSerialize: serialize_grpc_health_v1_HealthCheckResponse,\n    responseDeserialize: deserialize_grpc_health_v1_HealthCheckResponse,\n  },\n});\n\nexports.HealthClient = grpc.makeGenericClientConstructor(HealthService);\n","import { status as GrpcStatus } from \"@grpc/grpc-js\";\n\nimport { GrpcError } from \"./GrpcError.js\";\nimport * as health_grpc_pb from \"./v1/health_grpc_pb.js\";\nimport * as health_pb from \"./v1/health_pb.js\";\n\nexport type StatusMap = Record<string, number | undefined>;\n\nexport { health_grpc_pb, health_pb };\n\nexport type Option = {\n  checkHooks?: (req: health_pb.HealthCheckRequest) => void;\n  watchHooks?: (req: health_pb.HealthCheckRequest) => void;\n};\n\nconst defaultStatusMap: StatusMap = {\n  \"\": health_pb.HealthCheckResponse.ServingStatus.SERVING,\n};\n\nconst createHealthServerImpl = (statusMap: StatusMap = defaultStatusMap, option?: Option): health_grpc_pb.IHealthServer => {\n  const watchErrorMap: Record<string, Error> = {};\n  const watchStatusMap: Record<string, health_pb.HealthCheckResponse.ServingStatus> = {};\n  const server: health_grpc_pb.IHealthServer = {\n    check: (call, callback) => {\n      option?.checkHooks?.(call.request);\n      const service: string = call.request.getService();\n      const status = statusMap[service];\n\n      const res = new health_pb.HealthCheckResponse();\n      if (!status) {\n        const error = new GrpcError(\"unknown service.\", {\n          code: GrpcStatus.NOT_FOUND,\n        });\n        callback(error, undefined);\n      } else {\n        res.setStatus(status);\n        callback(null, res);\n      }\n    },\n    watch: (call) => {\n      option?.watchHooks?.(call.request);\n      const service: string = call.request.getService();\n      const interval = setInterval(() => {\n        // Updated status is used for getting service status updates.\n        let servingStatus: health_pb.HealthCheckResponse.ServingStatus = health_pb.HealthCheckResponse.ServingStatus.SERVING;\n        const res = new health_pb.HealthCheckResponse();\n        if (!statusMap[service]) {\n          // Set the initial status\n          servingStatus = health_pb.HealthCheckResponse.ServingStatus.SERVICE_UNKNOWN;\n          statusMap[service] = servingStatus;\n          res.setStatus(servingStatus);\n          call.write(res);\n        }\n        // Add to the watch status map\n        watchStatusMap[service] = servingStatus;\n        if (!watchErrorMap[service]) {\n          const lastSentStatus = statusMap[service] || -1;\n          if (lastSentStatus !== servingStatus) {\n            // Status has changed\n            statusMap[service] = servingStatus;\n            res.setStatus(servingStatus);\n            call.write(res, (error?: Error) => {\n              if (error) {\n                // Terminate stream on next tick\n                watchErrorMap[service] = error;\n              }\n            });\n          }\n        } else {\n          clearInterval(interval);\n          // Terminate the stream\n          const grpcError = new GrpcError(\"Stream has ended.\", {\n            code: GrpcStatus.CANCELLED,\n          });\n          call.emit(\"error\", grpcError);\n          call.end();\n        }\n      }, 1000);\n    },\n  };\n\n  return server;\n};\n\nexport default {\n  createHealthServerImpl,\n  service: health_grpc_pb.HealthService,\n  Client: health_grpc_pb.HealthClient,\n};\n"],"mappings":"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","names":["health_pb","HealthService"]}